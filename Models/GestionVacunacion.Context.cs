//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoGestionCanina_APIandMVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_VACUNACIONEntities : DbContext
    {
        public DB_VACUNACIONEntities()
            : base("name=DB_VACUNACIONEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Canino> Canino { get; set; }
        public virtual DbSet<Centros> Centros { get; set; }
        public virtual DbSet<Citas> Citas { get; set; }
        public virtual DbSet<CitaVacunacion> CitaVacunacion { get; set; }
        public virtual DbSet<EstadoCitas> EstadoCitas { get; set; }
        public virtual DbSet<Horario> Horario { get; set; }
        public virtual DbSet<PropietarioCanino> PropietarioCanino { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<Vacunaciones> Vacunaciones { get; set; }
        public virtual DbSet<Vacunadores> Vacunadores { get; set; }
        public virtual DbSet<Vacunas> Vacunas { get; set; }
    
        public virtual ObjectResult<GC_BUSCAR_HORARIO_Result> GC_BUSCAR_HORARIO(string tIPOBUSQUEDA, Nullable<System.DateTime> fECHAATENCION, string fILTRO)
        {
            var tIPOBUSQUEDAParameter = tIPOBUSQUEDA != null ?
                new ObjectParameter("TIPOBUSQUEDA", tIPOBUSQUEDA) :
                new ObjectParameter("TIPOBUSQUEDA", typeof(string));
    
            var fECHAATENCIONParameter = fECHAATENCION.HasValue ?
                new ObjectParameter("FECHAATENCION", fECHAATENCION) :
                new ObjectParameter("FECHAATENCION", typeof(System.DateTime));
    
            var fILTROParameter = fILTRO != null ?
                new ObjectParameter("FILTRO", fILTRO) :
                new ObjectParameter("FILTRO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GC_BUSCAR_HORARIO_Result>("GC_BUSCAR_HORARIO", tIPOBUSQUEDAParameter, fECHAATENCIONParameter, fILTROParameter);
        }
    
        public virtual int GC_EDITAR_CITA_SP(Nullable<int> iD, Nullable<int> vacunadorID, Nullable<int> caninoID, Nullable<int> propietarioID, Nullable<int> centroID, Nullable<System.DateTime> fECHAATENCION, Nullable<System.TimeSpan> iNICIOATENCION, Nullable<System.TimeSpan> fINATENCION, string eSTADOcita, string oBSERVACIONES, Nullable<bool> estado)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var vacunadorIDParameter = vacunadorID.HasValue ?
                new ObjectParameter("VacunadorID", vacunadorID) :
                new ObjectParameter("VacunadorID", typeof(int));
    
            var caninoIDParameter = caninoID.HasValue ?
                new ObjectParameter("CaninoID", caninoID) :
                new ObjectParameter("CaninoID", typeof(int));
    
            var propietarioIDParameter = propietarioID.HasValue ?
                new ObjectParameter("PropietarioID", propietarioID) :
                new ObjectParameter("PropietarioID", typeof(int));
    
            var centroIDParameter = centroID.HasValue ?
                new ObjectParameter("CentroID", centroID) :
                new ObjectParameter("CentroID", typeof(int));
    
            var fECHAATENCIONParameter = fECHAATENCION.HasValue ?
                new ObjectParameter("FECHAATENCION", fECHAATENCION) :
                new ObjectParameter("FECHAATENCION", typeof(System.DateTime));
    
            var iNICIOATENCIONParameter = iNICIOATENCION.HasValue ?
                new ObjectParameter("INICIOATENCION", iNICIOATENCION) :
                new ObjectParameter("INICIOATENCION", typeof(System.TimeSpan));
    
            var fINATENCIONParameter = fINATENCION.HasValue ?
                new ObjectParameter("FINATENCION", fINATENCION) :
                new ObjectParameter("FINATENCION", typeof(System.TimeSpan));
    
            var eSTADOcitaParameter = eSTADOcita != null ?
                new ObjectParameter("ESTADOcita", eSTADOcita) :
                new ObjectParameter("ESTADOcita", typeof(string));
    
            var oBSERVACIONESParameter = oBSERVACIONES != null ?
                new ObjectParameter("OBSERVACIONES", oBSERVACIONES) :
                new ObjectParameter("OBSERVACIONES", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GC_EDITAR_CITA_SP", iDParameter, vacunadorIDParameter, caninoIDParameter, propietarioIDParameter, centroIDParameter, fECHAATENCIONParameter, iNICIOATENCIONParameter, fINATENCIONParameter, eSTADOcitaParameter, oBSERVACIONESParameter, estadoParameter);
        }
    
        public virtual int GC_EDITAR_HORARIO_SP(Nullable<int> iD, Nullable<int> vacunadorID, Nullable<System.DateTime> fECHAATENCION, Nullable<System.TimeSpan> iNICIOATENCION, Nullable<System.TimeSpan> fINATENCION, Nullable<bool> aCTIVO)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var vacunadorIDParameter = vacunadorID.HasValue ?
                new ObjectParameter("VacunadorID", vacunadorID) :
                new ObjectParameter("VacunadorID", typeof(int));
    
            var fECHAATENCIONParameter = fECHAATENCION.HasValue ?
                new ObjectParameter("FECHAATENCION", fECHAATENCION) :
                new ObjectParameter("FECHAATENCION", typeof(System.DateTime));
    
            var iNICIOATENCIONParameter = iNICIOATENCION.HasValue ?
                new ObjectParameter("INICIOATENCION", iNICIOATENCION) :
                new ObjectParameter("INICIOATENCION", typeof(System.TimeSpan));
    
            var fINATENCIONParameter = fINATENCION.HasValue ?
                new ObjectParameter("FINATENCION", fINATENCION) :
                new ObjectParameter("FINATENCION", typeof(System.TimeSpan));
    
            var aCTIVOParameter = aCTIVO.HasValue ?
                new ObjectParameter("ACTIVO", aCTIVO) :
                new ObjectParameter("ACTIVO", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GC_EDITAR_HORARIO_SP", iDParameter, vacunadorIDParameter, fECHAATENCIONParameter, iNICIOATENCIONParameter, fINATENCIONParameter, aCTIVOParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GC_INSERTAR_CITA_SP(Nullable<int> idVacunador, Nullable<int> idCanino, Nullable<int> idPropietario, Nullable<int> idCentro, Nullable<System.DateTime> fECHAATENCION, Nullable<System.TimeSpan> iNICIOATENCION, Nullable<System.TimeSpan> fINATENCION, string eSTADO)
        {
            var idVacunadorParameter = idVacunador.HasValue ?
                new ObjectParameter("IdVacunador", idVacunador) :
                new ObjectParameter("IdVacunador", typeof(int));
    
            var idCaninoParameter = idCanino.HasValue ?
                new ObjectParameter("IdCanino", idCanino) :
                new ObjectParameter("IdCanino", typeof(int));
    
            var idPropietarioParameter = idPropietario.HasValue ?
                new ObjectParameter("IdPropietario", idPropietario) :
                new ObjectParameter("IdPropietario", typeof(int));
    
            var idCentroParameter = idCentro.HasValue ?
                new ObjectParameter("IdCentro", idCentro) :
                new ObjectParameter("IdCentro", typeof(int));
    
            var fECHAATENCIONParameter = fECHAATENCION.HasValue ?
                new ObjectParameter("FECHAATENCION", fECHAATENCION) :
                new ObjectParameter("FECHAATENCION", typeof(System.DateTime));
    
            var iNICIOATENCIONParameter = iNICIOATENCION.HasValue ?
                new ObjectParameter("INICIOATENCION", iNICIOATENCION) :
                new ObjectParameter("INICIOATENCION", typeof(System.TimeSpan));
    
            var fINATENCIONParameter = fINATENCION.HasValue ?
                new ObjectParameter("FINATENCION", fINATENCION) :
                new ObjectParameter("FINATENCION", typeof(System.TimeSpan));
    
            var eSTADOParameter = eSTADO != null ?
                new ObjectParameter("ESTADO", eSTADO) :
                new ObjectParameter("ESTADO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GC_INSERTAR_CITA_SP", idVacunadorParameter, idCaninoParameter, idPropietarioParameter, idCentroParameter, fECHAATENCIONParameter, iNICIOATENCIONParameter, fINATENCIONParameter, eSTADOParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GC_INSERTAR_HORARIO_SP(Nullable<int> vacunadorID, Nullable<System.DateTime> fECHAATENCION, Nullable<System.TimeSpan> iNICIOATENCION, Nullable<System.TimeSpan> fINATENCION, string uSUARIOREGISTRO)
        {
            var vacunadorIDParameter = vacunadorID.HasValue ?
                new ObjectParameter("VacunadorID", vacunadorID) :
                new ObjectParameter("VacunadorID", typeof(int));
    
            var fECHAATENCIONParameter = fECHAATENCION.HasValue ?
                new ObjectParameter("FECHAATENCION", fECHAATENCION) :
                new ObjectParameter("FECHAATENCION", typeof(System.DateTime));
    
            var iNICIOATENCIONParameter = iNICIOATENCION.HasValue ?
                new ObjectParameter("INICIOATENCION", iNICIOATENCION) :
                new ObjectParameter("INICIOATENCION", typeof(System.TimeSpan));
    
            var fINATENCIONParameter = fINATENCION.HasValue ?
                new ObjectParameter("FINATENCION", fINATENCION) :
                new ObjectParameter("FINATENCION", typeof(System.TimeSpan));
    
            var uSUARIOREGISTROParameter = uSUARIOREGISTRO != null ?
                new ObjectParameter("USUARIOREGISTRO", uSUARIOREGISTRO) :
                new ObjectParameter("USUARIOREGISTRO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GC_INSERTAR_HORARIO_SP", vacunadorIDParameter, fECHAATENCIONParameter, iNICIOATENCIONParameter, fINATENCIONParameter, uSUARIOREGISTROParameter);
        }
    
        public virtual ObjectResult<GC_LEER_CITA_SP_Result> GC_LEER_CITA_SP(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GC_LEER_CITA_SP_Result>("GC_LEER_CITA_SP", iDParameter);
        }
    
        public virtual ObjectResult<GC_LEER_CITAS_MEDICO_Result> GC_LEER_CITAS_MEDICO(Nullable<System.DateTime> fECHAATENCION, Nullable<int> idVacunador)
        {
            var fECHAATENCIONParameter = fECHAATENCION.HasValue ?
                new ObjectParameter("FECHAATENCION", fECHAATENCION) :
                new ObjectParameter("FECHAATENCION", typeof(System.DateTime));
    
            var idVacunadorParameter = idVacunador.HasValue ?
                new ObjectParameter("IdVacunador", idVacunador) :
                new ObjectParameter("IdVacunador", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GC_LEER_CITAS_MEDICO_Result>("GC_LEER_CITAS_MEDICO", fECHAATENCIONParameter, idVacunadorParameter);
        }
    
        public virtual ObjectResult<GC_LEER_HORARIO_SP_Result> GC_LEER_HORARIO_SP(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GC_LEER_HORARIO_SP_Result>("GC_LEER_HORARIO_SP", iDParameter);
        }
    
        public virtual ObjectResult<GC_LEER_HORARIOS_POR_MEDICO_SP_Result> GC_LEER_HORARIOS_POR_MEDICO_SP(Nullable<int> vacunadorID)
        {
            var vacunadorIDParameter = vacunadorID.HasValue ?
                new ObjectParameter("VacunadorID", vacunadorID) :
                new ObjectParameter("VacunadorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GC_LEER_HORARIOS_POR_MEDICO_SP_Result>("GC_LEER_HORARIOS_POR_MEDICO_SP", vacunadorIDParameter);
        }
    
        public virtual int sp_existeCita(Nullable<int> idCanino, Nullable<int> idCita, Nullable<int> idVacunador, ObjectParameter resultado)
        {
            var idCaninoParameter = idCanino.HasValue ?
                new ObjectParameter("IdCanino", idCanino) :
                new ObjectParameter("IdCanino", typeof(int));
    
            var idCitaParameter = idCita.HasValue ?
                new ObjectParameter("IdCita", idCita) :
                new ObjectParameter("IdCita", typeof(int));
    
            var idVacunadorParameter = idVacunador.HasValue ?
                new ObjectParameter("IdVacunador", idVacunador) :
                new ObjectParameter("IdVacunador", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_existeCita", idCaninoParameter, idCitaParameter, idVacunadorParameter, resultado);
        }
    
        public virtual int sp_ModificarCanino(Nullable<int> idCanino, string nombre, string raza, Nullable<bool> sexo, Nullable<int> idPropietario, string peso, string color, Nullable<System.DateTime> fechaNacimiento, Nullable<bool> estado, ObjectParameter resultado)
        {
            var idCaninoParameter = idCanino.HasValue ?
                new ObjectParameter("IdCanino", idCanino) :
                new ObjectParameter("IdCanino", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var razaParameter = raza != null ?
                new ObjectParameter("Raza", raza) :
                new ObjectParameter("Raza", typeof(string));
    
            var sexoParameter = sexo.HasValue ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(bool));
    
            var idPropietarioParameter = idPropietario.HasValue ?
                new ObjectParameter("IdPropietario", idPropietario) :
                new ObjectParameter("IdPropietario", typeof(int));
    
            var pesoParameter = peso != null ?
                new ObjectParameter("Peso", peso) :
                new ObjectParameter("Peso", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ModificarCanino", idCaninoParameter, nombreParameter, razaParameter, sexoParameter, idPropietarioParameter, pesoParameter, colorParameter, fechaNacimientoParameter, estadoParameter, resultado);
        }
    
        public virtual int sp_ModificarCentro(Nullable<int> idCentro, string nombre, string direccion, Nullable<bool> estado, ObjectParameter resultado)
        {
            var idCentroParameter = idCentro.HasValue ?
                new ObjectParameter("IdCentro", idCentro) :
                new ObjectParameter("IdCentro", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ModificarCentro", idCentroParameter, nombreParameter, direccionParameter, estadoParameter, resultado);
        }
    
        public virtual int sp_ModificarPropietario(Nullable<int> idPropietario, string nombre, string apellido, string cedula, string telefono, string correo, string contrasena, string direccion, Nullable<int> idRol, Nullable<bool> estado, ObjectParameter resultado)
        {
            var idPropietarioParameter = idPropietario.HasValue ?
                new ObjectParameter("IdPropietario", idPropietario) :
                new ObjectParameter("IdPropietario", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("IdRol", idRol) :
                new ObjectParameter("IdRol", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ModificarPropietario", idPropietarioParameter, nombreParameter, apellidoParameter, cedulaParameter, telefonoParameter, correoParameter, contrasenaParameter, direccionParameter, idRolParameter, estadoParameter, resultado);
        }
    
        public virtual int sp_ModificarUsuario(Nullable<int> idUsuario, string nombre, string apellido, string cedula, string telefono, string correo, string contrasena, string direccion, Nullable<int> idRol, Nullable<bool> estado, ObjectParameter resultado)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("IdRol", idRol) :
                new ObjectParameter("IdRol", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ModificarUsuario", idUsuarioParameter, nombreParameter, apellidoParameter, cedulaParameter, telefonoParameter, correoParameter, contrasenaParameter, direccionParameter, idRolParameter, estadoParameter, resultado);
        }
    
        public virtual int sp_ModificarVacuna(Nullable<int> idVacuna, string nombre, string laboratorio, string lote, string descripcion, Nullable<System.DateTime> fechaCaducidad, Nullable<bool> estado, ObjectParameter resultado)
        {
            var idVacunaParameter = idVacuna.HasValue ?
                new ObjectParameter("IdVacuna", idVacuna) :
                new ObjectParameter("IdVacuna", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var laboratorioParameter = laboratorio != null ?
                new ObjectParameter("Laboratorio", laboratorio) :
                new ObjectParameter("Laboratorio", typeof(string));
    
            var loteParameter = lote != null ?
                new ObjectParameter("Lote", lote) :
                new ObjectParameter("Lote", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var fechaCaducidadParameter = fechaCaducidad.HasValue ?
                new ObjectParameter("FechaCaducidad", fechaCaducidad) :
                new ObjectParameter("FechaCaducidad", typeof(System.DateTime));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ModificarVacuna", idVacunaParameter, nombreParameter, laboratorioParameter, loteParameter, descripcionParameter, fechaCaducidadParameter, estadoParameter, resultado);
        }
    
        public virtual int sp_modificarVacunacion(Nullable<int> idVacunacion, Nullable<int> idCentro, Nullable<int> idVacuna, Nullable<int> idCanino, Nullable<int> idVacunador, Nullable<int> dosis, Nullable<System.DateTime> fechaProxima, ObjectParameter resultado)
        {
            var idVacunacionParameter = idVacunacion.HasValue ?
                new ObjectParameter("IdVacunacion", idVacunacion) :
                new ObjectParameter("IdVacunacion", typeof(int));
    
            var idCentroParameter = idCentro.HasValue ?
                new ObjectParameter("IdCentro", idCentro) :
                new ObjectParameter("IdCentro", typeof(int));
    
            var idVacunaParameter = idVacuna.HasValue ?
                new ObjectParameter("IdVacuna", idVacuna) :
                new ObjectParameter("IdVacuna", typeof(int));
    
            var idCaninoParameter = idCanino.HasValue ?
                new ObjectParameter("IdCanino", idCanino) :
                new ObjectParameter("IdCanino", typeof(int));
    
            var idVacunadorParameter = idVacunador.HasValue ?
                new ObjectParameter("IdVacunador", idVacunador) :
                new ObjectParameter("IdVacunador", typeof(int));
    
            var dosisParameter = dosis.HasValue ?
                new ObjectParameter("Dosis", dosis) :
                new ObjectParameter("Dosis", typeof(int));
    
            var fechaProximaParameter = fechaProxima.HasValue ?
                new ObjectParameter("FechaProxima", fechaProxima) :
                new ObjectParameter("FechaProxima", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_modificarVacunacion", idVacunacionParameter, idCentroParameter, idVacunaParameter, idCaninoParameter, idVacunadorParameter, dosisParameter, fechaProximaParameter, resultado);
        }
    
        public virtual int sp_ModificarVacunador(Nullable<int> idVacunador, string nombre, string apellido, string cedula, string telefono, string correo, string contrasena, string ocupacion, string direccion, Nullable<int> idRol, Nullable<bool> estado, ObjectParameter resultado)
        {
            var idVacunadorParameter = idVacunador.HasValue ?
                new ObjectParameter("IdVacunador", idVacunador) :
                new ObjectParameter("IdVacunador", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var ocupacionParameter = ocupacion != null ?
                new ObjectParameter("Ocupacion", ocupacion) :
                new ObjectParameter("Ocupacion", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("IdRol", idRol) :
                new ObjectParameter("IdRol", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ModificarVacunador", idVacunadorParameter, nombreParameter, apellidoParameter, cedulaParameter, telefonoParameter, correoParameter, contrasenaParameter, ocupacionParameter, direccionParameter, idRolParameter, estadoParameter, resultado);
        }
    
        public virtual int sp_RegistrarCanino(string nombre, string raza, Nullable<int> idPropietario, string sexo, string peso, string color, Nullable<System.DateTime> fechaNacimiento, ObjectParameter resultado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var razaParameter = raza != null ?
                new ObjectParameter("Raza", raza) :
                new ObjectParameter("Raza", typeof(string));
    
            var idPropietarioParameter = idPropietario.HasValue ?
                new ObjectParameter("IdPropietario", idPropietario) :
                new ObjectParameter("IdPropietario", typeof(int));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var pesoParameter = peso != null ?
                new ObjectParameter("Peso", peso) :
                new ObjectParameter("Peso", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarCanino", nombreParameter, razaParameter, idPropietarioParameter, sexoParameter, pesoParameter, colorParameter, fechaNacimientoParameter, resultado);
        }
    
        public virtual int sp_RegistrarCentros(string nombre, string direccion, ObjectParameter resultado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarCentros", nombreParameter, direccionParameter, resultado);
        }
    
        public virtual int sp_RegistrarCitas(Nullable<int> idVacunador, Nullable<int> idPropietario, Nullable<int> idCentro, Nullable<int> idCanino, Nullable<int> idEstado, Nullable<System.DateTime> fecha, Nullable<System.TimeSpan> hota, ObjectParameter resultado)
        {
            var idVacunadorParameter = idVacunador.HasValue ?
                new ObjectParameter("IdVacunador", idVacunador) :
                new ObjectParameter("IdVacunador", typeof(int));
    
            var idPropietarioParameter = idPropietario.HasValue ?
                new ObjectParameter("IdPropietario", idPropietario) :
                new ObjectParameter("IdPropietario", typeof(int));
    
            var idCentroParameter = idCentro.HasValue ?
                new ObjectParameter("IdCentro", idCentro) :
                new ObjectParameter("IdCentro", typeof(int));
    
            var idCaninoParameter = idCanino.HasValue ?
                new ObjectParameter("IdCanino", idCanino) :
                new ObjectParameter("IdCanino", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var hotaParameter = hota.HasValue ?
                new ObjectParameter("Hota", hota) :
                new ObjectParameter("Hota", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarCitas", idVacunadorParameter, idPropietarioParameter, idCentroParameter, idCaninoParameter, idEstadoParameter, fechaParameter, hotaParameter, resultado);
        }
    
        public virtual int sp_RegistrarPropietario(string nombre, string apellido, string cedula, string telefono, string correo, string contrasena, string direccion, Nullable<int> idRol, ObjectParameter resultado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("IdRol", idRol) :
                new ObjectParameter("IdRol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarPropietario", nombreParameter, apellidoParameter, cedulaParameter, telefonoParameter, correoParameter, contrasenaParameter, direccionParameter, idRolParameter, resultado);
        }
    
        public virtual int sp_RegistrarUsuario(string nombre, string apellido, string cedula, string telefono, string correo, string contrasena, string direccion, Nullable<int> idRol, ObjectParameter resultado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("IdRol", idRol) :
                new ObjectParameter("IdRol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarUsuario", nombreParameter, apellidoParameter, cedulaParameter, telefonoParameter, correoParameter, contrasenaParameter, direccionParameter, idRolParameter, resultado);
        }
    
        public virtual int sp_RegistrarVacuna(string nombre, string laboratorio, string lote, string descripcion, Nullable<System.DateTime> fechaCaducidad, ObjectParameter resultado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var laboratorioParameter = laboratorio != null ?
                new ObjectParameter("Laboratorio", laboratorio) :
                new ObjectParameter("Laboratorio", typeof(string));
    
            var loteParameter = lote != null ?
                new ObjectParameter("Lote", lote) :
                new ObjectParameter("Lote", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var fechaCaducidadParameter = fechaCaducidad.HasValue ?
                new ObjectParameter("FechaCaducidad", fechaCaducidad) :
                new ObjectParameter("FechaCaducidad", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarVacuna", nombreParameter, laboratorioParameter, loteParameter, descripcionParameter, fechaCaducidadParameter, resultado);
        }
    
        public virtual int sp_registrarVacunacion(Nullable<int> idCentro, Nullable<int> idVacuna, Nullable<int> idCanino, Nullable<int> idVacunador, Nullable<int> dosis, Nullable<System.DateTime> fechaProxima, ObjectParameter resultado)
        {
            var idCentroParameter = idCentro.HasValue ?
                new ObjectParameter("IdCentro", idCentro) :
                new ObjectParameter("IdCentro", typeof(int));
    
            var idVacunaParameter = idVacuna.HasValue ?
                new ObjectParameter("IdVacuna", idVacuna) :
                new ObjectParameter("IdVacuna", typeof(int));
    
            var idCaninoParameter = idCanino.HasValue ?
                new ObjectParameter("IdCanino", idCanino) :
                new ObjectParameter("IdCanino", typeof(int));
    
            var idVacunadorParameter = idVacunador.HasValue ?
                new ObjectParameter("IdVacunador", idVacunador) :
                new ObjectParameter("IdVacunador", typeof(int));
    
            var dosisParameter = dosis.HasValue ?
                new ObjectParameter("Dosis", dosis) :
                new ObjectParameter("Dosis", typeof(int));
    
            var fechaProximaParameter = fechaProxima.HasValue ?
                new ObjectParameter("FechaProxima", fechaProxima) :
                new ObjectParameter("FechaProxima", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_registrarVacunacion", idCentroParameter, idVacunaParameter, idCaninoParameter, idVacunadorParameter, dosisParameter, fechaProximaParameter, resultado);
        }
    
        public virtual int sp_RegistrarVacunador(string nombre, string apellido, string cedula, string telefono, string correo, string contrasena, string ocupacion, string direccion, Nullable<int> idRol, ObjectParameter resultado)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var ocupacionParameter = ocupacion != null ?
                new ObjectParameter("Ocupacion", ocupacion) :
                new ObjectParameter("Ocupacion", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var idRolParameter = idRol.HasValue ?
                new ObjectParameter("IdRol", idRol) :
                new ObjectParameter("IdRol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarVacunador", nombreParameter, apellidoParameter, cedulaParameter, telefonoParameter, correoParameter, contrasenaParameter, ocupacionParameter, direccionParameter, idRolParameter, resultado);
        }
    }
}
